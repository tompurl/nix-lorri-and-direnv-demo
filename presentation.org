#+TITLE: Using Nix, Direnv, and Lorri To Build Robust, Polyglot Development Environments
#+Email: tom@tompurl.com
#+Author: Tom Purl

* Welcome!
* Who Am I?
- I'm [[https://blog.tompurl.com/about][Tom]]!
- DevOps Engineer at [[https://www2.wi-tronix.com/][Wi-Tronix]]
- Father, husband and friend who loves building cool things and sharing them with others
- The opinions expressed here are solely my own and do not express the views or opinions of my employer.
* Abstract
#+BEGIN_EXAMPLE
Setting up a development environment is often harder than it has to be. Every framework expects you to use a very specific dev stack, and often they expect you to use very specific **versions** of each tool in that stack. And this complexity increases exponentially if the project on which you're working expects you to use multiple dependency managers or build tools.

You can use VM's, Docker and the cloud to improve the situation, but these tools have very coarse integration with your favorite text editor or IDE. They can improve "reproducibility", but often decrease velocity and increase debugging time.

Wouldn't it be nice to invest a little time into a set of tools that make it possible to "spin up" a development environment in less than a minute? What if the time invested in learning about those tools could be used for multiple languages and frameworks?  And what if these tools worked in a seamless way that integrates transparently with many popular text editors and IDE's?

I hope to be able to deliver on this premise üòä. During this meeting I will be giving a demo on how I use a small set of powerful, cross-platform tools to quickly build out robust, complex development environments for **Python and Clojure projects**. We'll start small, showing you how you can increase velocity with a few simple tools like **nix-shell** and **the nix package manager**. I'll then show how you can truly make environment management simple, automatic, and version-controllable using **lorri** and **direnv**.
#+END_EXAMPLE
* Notes
- This presentation will mostly be a series of live demonstrations
- Questions and comments are welcome!
- Not a deep dive
- I do not endorse the following tools for all situations -YMMV
* My Problem to Solve...
- Setting up a development environment for language X is harder than it needs to be
** Issue # 1: Dependency Management is Tricky
- Every language uses a different tool, each with their own philosophy
- Many languages support *multiple tools* for this processs.
  - Examples:
    - What's the difference between Gulp and Grunt?

** Issue # 2: So is Runtime Management
- Often you have to use a specific version of a runtime
- It can be difficult to install multiple versions of runtimes using OS package managers
* Conventional Solutions
** Option 1: Language-Specific Runtime Managers
- Powerful option
- Examples: =pyenv=, =rbenv=
- *Usually* requires compilation, which can be *slow* and *error-prone*
** Option 2: Docker / Containers
- Solves a *lot* of these problems
- Provides *very* coarse integration with most IDE's and text editors
* Unconventional Solutions
This is what I'm demoing today üò∫
* Nix Package Manager
** Overview
[[./images/nix-banner.png]]
- Strives to be a *reproducible*, *declarative*, and *reliable* package manager
- Can be used on almost any Linux or Mac system, or with NixOS
** Demo - Installing the Python 3.9 Runtime
#+BEGIN_SRC shell
# https://search.nixos.org/packages
mkdir /tmp/example-1
cd /tmp/example-1
nix-shell -p python3Full
which python
exit
which python
#+END_SRC
** Take-Aways
- That was done without root access
- Wasn't that easy?
** Demo - Bootstrap a Django Project
*** Bootstrap
#+BEGIN_SRC shell
mkdir /tmp/example-1
cd /tmp/example-1
nix-shell -p python3Full poetry
poetry init
poetry add django
poetry add --dev ipython
poetry run django-admin startproject test_listener
cd test_listener
poetry run python manage.py runserver
# http://localhost:8000
exit
#+END_SRC

*** Write Your Config to a File
#+BEGIN_SRC shell
cd /tmp/example-1
cat <<EOF> shell.nix
{ pkgs ? import <nixpkgs> {} }:

pkgs.mkShell {
  buildInputs = [
    pkgs.python3Full
    pkgs.poetry
    pkgs.nodePackages.pyright

    # keep this line if you use bash
    pkgs.bashInteractive
  ];
}
EOF
nix-shell
#+END_SRC
* Unclutter Your Profile with Direnv
** Overview
From the web site:

#+BEGIN_QUOTE -r
=direnv= is an extension for your shell. It augments existing shells with a new feature that can load and unload environment variables depending on the current directory.
#+END_QUOTE
** Demo 1 - Updating Environment Variables
#+BEGIN_SRC shell
mkdir /tmp/example-2
cd /tmp/example-2
cat <<EOF > .envrc
export MY_UN=tom
export MY_PW=PopSecret
EOF
direnv allow
echo $MY_UN
echo $MY_PW
cd ..
echo $MY_UN
cd example-2
echo $MY_UN
#+END_SRC
** Demo 2 - Updating Your PATH
#+BEGIN_SRC shell
cd /tmp/example-2
mkdir bin
cat <<EOF > bin/pm
python manage.py $@
EOF
chmod +x bin/pm
cd test_listener_two
../bin/pm runserver $@
### pause
cd ..
echo PATH_add bin >> .envrc
direnv allow
cd test_listener
echo $PATH
pm runserver
# https://direnv.net/man/direnv-stdlib.1.html
#+END_SRC
* So Where Are We?
[[./images/shaun-confused.jpeg]]
1. ‚úÖ Project-level dev tool and runtime isolation (i.e. sandboxing)
2. ‚úÖ Minimal installation from source
3. ‚úÖ The ability to dispose of and create a dev environment fairly quickly and easily
* But How Can We Improve?
[[./images/shaun-happy.jpeg]]
1. ‚òπ I have manually "activate" my development environment every time I interact with it
2. ‚òπ Editor integration isn't great
3. ‚òπ `nix-shell` is great but can be fairly slow (> 5 minutes) depending on the number of dependencies or whether I invoked garbage collection recently.
* Lorri - The Icing on the Cake üç∞
** Overview
- [[https://www.tweag.io/blog/2019-03-28-introducing-lorri/][lorri]] is a nix-shell replacement for project development
- Nix + Direnv + üî• + üí™üèΩ
- Excellent editor integrations
** Demo
1. Create a new folder
2. Bootstrap a Django project
3. Add =bpython=
4. =cd= up
5. =cd= back into project dir
* Not Just Python! üêç
** Demo - Clojure Project
** Emacs Integration
- =envrc=
* Considerations
- There is a learning curve üìà
- There are bumps in the road
- Moving too fast without will end in tears
* Resources
** Direnv
- [[https://direnv.net/][https://direnv.net/]]
- [[https://direnv.net/man/direnv-stdlib.1.html][direnv stdlib]]
** Nix Package Manager / Lorri
- General
- Python
*** General
- [[https://nixos.org/][https://nixos.org/]]
- [[https://github.com/nix-community/lorri][nix-community / lorri]]
- [[https://nixos.org/guides/nix-pills/][Nix Pills]]
*** Python-Specific
- [[https://thomazleite.com/posts/development-with-nix-python/][Development with Nix: Python]]
- [[https://github.com/davhau/mach-nix][mach-nix - Create highly reproducible python environments]]
- [[https://github.com/nix-community/poetry2nix][nix-community / poetry2nix]]
* Questions?
* Thank You!
